{{-
# Nonterminal identifiers
nonterm_ids = {}
i = 0
for nt in table.nonterminals
    nonterm_ids[nt] = i++
end
-}}
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;

public class Parser
{
    private static readonly ImmutableArray<byte> = ImmutableArray.Create();

    private readonly Lexer lexer;
    private readonly Stack<int> stateStack = new();
    private readonly Stack<ParseTree> symbolStack = new();

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    public ParseTree Parse()
    {
    }

    private int LookupGoto(int state, int nontermId) => (state, nontermId) switch
    {
{{-for state in table.states}}
    {{-for nt in table.nonterminals}}
        {{-$to = lr_goto(table, state, nt)}}
        {{-if $to == null}} {{-continue}} {{-end}}
        ({{state.id}}, {{nonterm_ids[nt]}}) => {{$to.id}},
    {{-end}}
{{-end}}
        _ => throw new InvalidOperationException(),
    };
}
